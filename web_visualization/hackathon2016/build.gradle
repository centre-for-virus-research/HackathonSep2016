apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'org.hidetake.ssh'

remotes {
  hackathon2016_aws {
    host = '52.211.101.130'
    user = 'ubuntu'
    identity = file('/Users/joshsinger/.ssh/hackathon2016_aws.pem')
  }
}

buildscript {
  repositories {
    // for ssh-deploy stuff
    jcenter()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
  }
}

repositories {
    mavenCentral()
        maven {
    	url 'http://repo.spring.io/libs-release-remote/'
    }
    
}

// assumes Ubuntu 14.04
task initHackathon2016AwsVm {
  doLast {
	  ssh.run {
	    session(remotes.hackathon2016_aws) {

	    	// stuff to manipulate package installer settings to allow non-interactive config
		    execute 'sudo apt-get install -y python-software-properties debconf-utils'
	    
	    	// Oracle Java 8
			// this repo contains Oracle Java installer 
			execute 'sudo add-apt-repository -y ppa:webupd8team/java'
			execute 'sudo apt-get update'
			// accept oracle license
			execute 'echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections'
			// install java8 jdk
			execute 'sudo apt-get install -y oracle-java8-installer'

            // Apache Tomcat 7
			execute 'sudo apt-get install -y tomcat7' 
			// tell Tomcat where to find Java
			execute "sudo sed -i 's/#JAVA_HOME.*/JAVA_HOME=\\/usr\\/lib\\/jvm\\/java-8-oracle\\/jre/g' /etc/default/tomcat7"

			// Required for running Tomcat on port 80
			execute "sudo apt-get install -y authbind"
			execute "sudo sed -i 's/#AUTHBIND=no/AUTHBIND=yes/g' /etc/default/tomcat7"
			// Increase Tomcat's Java heap to 1 Gb
			execute "sudo sed -i 's/JAVA_OPTS.*/JAVA_OPTS=\"-Djava.awt.headless=true -Xmx1024m -XX:+UseConcMarkSweepGC\"/g' /etc/default/tomcat7"

			execute "sudo touch /etc/authbind/byport/80"
			execute "sudo chmod 500 /etc/authbind/byport/80"
			execute "sudo chown tomcat7 /etc/authbind/byport/80"
			

			put from: 'hackathon2016_aws/server.xml', into: '/home/ubuntu/server.xml'
			execute "sudo cp /home/ubuntu/server.xml /etc/tomcat7/server.xml"
			
			// start Tomcat
			execute 'sudo service tomcat7 start'

			// MySQL (normally 5.5)
			execute 'echo "mysql-server mysql-server/root_password password root123" | sudo debconf-set-selections'
			execute 'echo "mysql-server mysql-server/root_password_again password root123" | sudo debconf-set-selections'
			execute 'sudo apt-get -y install mysql-server'
			// start on boot
			execute 'sudo update-rc.d mysql defaults'
			
			// create user gluetools with correct grants
			execute "echo 'GRANT ALL ON HACK.* TO \"hack\"@\"localhost\" identified by \"hack\";' | mysql -u root --password=root123"
			// create HACK database
			execute "echo 'create database HACK;' | mysql -u hack --password=hack" 


	    }
	  }
  }
}

task dumpLocalDB(type: Exec) {
	standardOutput = new FileOutputStream(new File('/tmp/hack.sql'))
	commandLine '/usr/local/mysql/bin/mysqldump', '-u', 'gluetools', '--password=gluetools', 'Hack'
}

task zipLocalDB(type: Exec, dependsOn: ['dumpLocalDB']) {
	commandLine '/usr/bin/gzip', '-f', '/tmp/hack.sql'
}

task deployLocalDbToHackathonAWS(dependsOn: ['zipLocalDB']) {
  doLast {
	  println "Uploading DB"
	  ssh.run {
	    session(remotes.hackathon2016_aws) {
	 	  put from: '/tmp/hack.sql.gz', into: '/tmp/hack.sql.gz'
	      execute 'sudo echo "drop database HACK; create database HACK;" | mysql -u hack --password=hack HACK'
	      execute 'sudo gunzip -c /tmp/hack.sql.gz | mysql -u hack --password=hack HACK'
	      execute 'sudo rm /tmp/hack.sql.gz'
	    }
	  }
  }
}


task deployWSConfigHackathonAWS() {
  ext.hackathonWSConfigFile = new File(projectDir, '/hackathon2016_aws/context.xml')
  ext.hackathonWSConfigTouchfile = new File(buildDir, '/deployWSConfigHackathonAWS.touchfile')
  inputs.file hackathonWSConfigFile
  outputs.file hackathonWSConfigTouchfile
  doLast {
	  println "Uploading "+hackathonWSConfigFile.name
	  ssh.run {
	    session(remotes.hackathon2016_aws) {
	      put from: hackathonWSConfigFile.absolutePath, into: '/tmp/hackathon2016.xml'
	      execute 'sudo service tomcat7 stop'
	      execute 'sudo mv /tmp/hackathon2016.xml /var/lib/tomcat7/conf/Catalina/localhost/hackathon2016.xml'
	      execute 'sudo service tomcat7 start'
	    }
	  }
	  hackathonWSConfigTouchfile.delete()
	  buildDir.mkdirs()
	  hackathonWSConfigTouchfile.createNewFile()
  }
}


task deployWarHackWebAWS(dependsOn: ['war', 'deployWSConfigHackathonAWS']) {
  ext.HackWsWarFile = new File(buildDir, '/libs/hackathon2016.war')
  ext.HackWsWarTouchfile = new File(buildDir, '/deployWarHackWebAWS.touchfile')
  inputs.file HackWsWarFile
  outputs.file HackWsWarTouchfile
  doLast {
	  println "Uploading "+HackWsWarFile.name
	  ssh.run {
	    session(remotes.hackathon2016_aws) {
	      put from: HackWsWarFile.absolutePath, into: '/tmp/hackathon2016.war'
	      execute 'sudo service tomcat7 stop'
	      execute 'sudo rm -rf /var/lib/tomcat7/webapps/hackathon2016'
	      execute 'sudo rm -rf /var/lib/tomcat7/webapps/hackathon2016.war'
	      execute 'sudo mv /tmp/hackathon2016.war /var/lib/tomcat7/webapps'
	      execute 'sudo service tomcat7 start'
	    }
	  }
	  HackWsWarTouchfile.delete()
	  buildDir.mkdirs()
	  HackWsWarTouchfile.createNewFile()
  }
}




configurations {
    cgen
}

dependencies {
    cgen group: 'org.apache.cayenne', name: 'cayenne-tools', version: '3.1'
}


dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4.1'
    compile group: 'org.apache.cayenne', name: 'cayenne-server', version:'3.1'
    compile group: 'org.apache.cayenne', name: 'cayenne-project', version:'3.1'
    compile group: 'org.biojava', name: 'biojava-core', version: '4.0.0'
    compile group: 'commons-io', name: 'commons-io', version: '1.3.2'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.35'
    compile group: 'org.apache.derby', name: 'derby', version: '10.5.3.0_1'
    // compile group: 'dnl.utils', name: 'j-text-utils', version: '0.3.3'
    compile group: 'javax.json', name:'javax.json-api', version:'1.0'
    compile group: 'org.glassfish', name:'javax.json', version:'1.0.4'
    compile group: 'org.apache.commons', name:'commons-lang3', version:'3.0'
	compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.19'
	compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.19' 
 	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
}


// uses cayenne to generate the datamodel classes.
task datamodel(dependsOn: 'checkCayenneTools') << {
	String destDir = 'src/main/java'
	String superPkg = 'uk.ac.gla.cvr.hackathon2016.auto'
	String mapFile1 = 'src/main/resources/datamap-local.map.xml'
	ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
}

task checkCayenneTools << {
    ant.taskdef(name:'cgen', 
    			classname:'org.apache.cayenne.tools.CayenneGeneratorTask', 
    			classpath: configurations.cgen.asPath)
}